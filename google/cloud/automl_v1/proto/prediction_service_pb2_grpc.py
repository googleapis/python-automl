# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.cloud.automl_v1.proto import (
    prediction_service_pb2 as google_dot_cloud_dot_automl__v1_dot_proto_dot_prediction__service__pb2,
)
from google.longrunning import (
    operations_pb2 as google_dot_longrunning_dot_operations__pb2,
)


class PredictionServiceStub(object):
    """AutoML Prediction API.

  On any input that is documented to expect a string parameter in
  snake_case or kebab-case, either of those cases is accepted.
  """

    def __init__(self, channel):
        """Constructor.

    Args:
      channel: A grpc.Channel.
    """
        self.Predict = channel.unary_unary(
            "/google.cloud.automl.v1.PredictionService/Predict",
            request_serializer=google_dot_cloud_dot_automl__v1_dot_proto_dot_prediction__service__pb2.PredictRequest.SerializeToString,
            response_deserializer=google_dot_cloud_dot_automl__v1_dot_proto_dot_prediction__service__pb2.PredictResponse.FromString,
        )
        self.BatchPredict = channel.unary_unary(
            "/google.cloud.automl.v1.PredictionService/BatchPredict",
            request_serializer=google_dot_cloud_dot_automl__v1_dot_proto_dot_prediction__service__pb2.BatchPredictRequest.SerializeToString,
            response_deserializer=google_dot_longrunning_dot_operations__pb2.Operation.FromString,
        )


class PredictionServiceServicer(object):
    """AutoML Prediction API.

  On any input that is documented to expect a string parameter in
  snake_case or kebab-case, either of those cases is accepted.
  """

    def Predict(self, request, context):
        """Perform an online prediction. The prediction result is directly
    returned in the response.
    Available for following ML scenarios, and their expected request payloads:

    <table>
    <tr>
    <td>AutoML Vision Classification</td>
    <td>An image in .JPEG, .GIF or .PNG format, image_bytes up to 30MB.</td>
    </tr>
    <tr>
    <td>AutoML Vision Object Detection</td>
    <td>An image in .JPEG, .GIF or .PNG format, image_bytes up to 30MB.</td>
    </tr>
    <tr>
    <td>AutoML Natural Language Classification</td>
    <td>A TextSnippet up to 60,000 characters, UTF-8 encoded or a document in
    .PDF, .TIF or .TIFF format with size upto 2MB.</td>
    </tr>
    <tr>
    <td>AutoML Natural Language Entity Extraction</td>
    <td>A TextSnippet up to 10,000 characters, UTF-8 NFC encoded or a document
    in .PDF, .TIF or .TIFF format with size upto 20MB.</td>
    </tr>
    <tr>
    <td>AutoML Natural Language Sentiment Analysis</td>
    <td>A TextSnippet up to 60,000 characters, UTF-8 encoded or a document in
    .PDF, .TIF or .TIFF format with size upto 2MB.</td>
    </tr>
    <tr>
    <td>AutoML Translation</td>
    <td>A TextSnippet up to 25,000 characters, UTF-8 encoded.</td>
    </tr>
    <tr>
    <td>AutoML Tables</td>
    <td>A row with column values matching
    the columns of the model, up to 5MB. Not available for FORECASTING
    `prediction_type`.
    </td>
    </tr>
    </table>
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BatchPredict(self, request, context):
        """Perform a batch prediction. Unlike the online [Predict][google.cloud.automl.v1.PredictionService.Predict], batch
    prediction result won't be immediately available in the response. Instead,
    a long running operation object is returned. User can poll the operation
    result via [GetOperation][google.longrunning.Operations.GetOperation]
    method. Once the operation is done, [BatchPredictResult][google.cloud.automl.v1.BatchPredictResult] is returned in
    the [response][google.longrunning.Operation.response] field.
    Available for following ML scenarios:

    * AutoML Vision Classification
    * AutoML Vision Object Detection
    * AutoML Video Intelligence Classification
    * AutoML Video Intelligence Object Tracking * AutoML Natural Language Classification
    * AutoML Natural Language Entity Extraction
    * AutoML Natural Language Sentiment Analysis
    * AutoML Tables
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_PredictionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Predict": grpc.unary_unary_rpc_method_handler(
            servicer.Predict,
            request_deserializer=google_dot_cloud_dot_automl__v1_dot_proto_dot_prediction__service__pb2.PredictRequest.FromString,
            response_serializer=google_dot_cloud_dot_automl__v1_dot_proto_dot_prediction__service__pb2.PredictResponse.SerializeToString,
        ),
        "BatchPredict": grpc.unary_unary_rpc_method_handler(
            servicer.BatchPredict,
            request_deserializer=google_dot_cloud_dot_automl__v1_dot_proto_dot_prediction__service__pb2.BatchPredictRequest.FromString,
            response_serializer=google_dot_longrunning_dot_operations__pb2.Operation.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "google.cloud.automl.v1.PredictionService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
